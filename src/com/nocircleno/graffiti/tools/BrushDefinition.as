/**  	Graffiti 3.0*  	______________________________________________________________________*  	www.nocircleno.com/graffiti/*//** 	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* 	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* 	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* 	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* 	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* 	OTHER DEALINGS IN THE SOFTWARE.*/package com.nocircleno.graffiti.tools {		import flash.geom.Point;		/**	* BrushDefinition Class is used to store all information regarding a single brush mark.	*	* @langversion 3.0    * @playerversion Flash 10 AIR 1.5 	*/	public class BrushDefinition extends Object	{			private var _type:String;		private var _color:uint;		private var _alpha:Number;		private var _size:Number;		private var _blur:Number;		private var _position:Point;		private var _commnads:Vector.<int>;		private var _drawingData:Vector.<Number>;				/**		* The <code>BrushDefinition</code> constructor.		*		* @param color Color of the brush mark.		* @param alpha Alpha value of the brush mark.		* @param position Position of the brush mark.		* @param commands Commands used to draw the brush mark.		* @param drawingData Drawing data.		* 		*/		public function BrushDefinition(type:String, color:uint, alpha:Number, size:Number, blur:Number, commands:Vector.<int>, drawingData:Vector.<Number>,  position:Point) 		{						// store properties			_type = type;			_color = color;			_alpha = alpha;			_size = size;			_blur = blur;			_position = position.clone();			_commnads = commands.concat(new Vector.<int>());			_drawingData = drawingData.concat(new Vector.<Number>());					}				/**		* Type of the brush.		*/			public function set type(value:String):void {			_type = value;		}				public function get type():String {			return _type;		}				/**		* Color of the brush mark.		*/			public function set color(value:uint):void {			_color = value;		}				public function get color():uint {			return _color;		}				/**		* Alpha value of the brush mark.		*/			public function set alpha(value:Number):void {			_alpha = value;		}				public function get alpha():Number {			return _alpha;		}				/**		* Size of the brush.		*/			public function set size(value:Number):void {			_size = value;		}				public function get size():Number {			return _size;		}				/**		* Brush blur.		*/			public function set blur(value:Number):void {			_blur = value;		}				public function get blur():Number {			return _blur;		}				/**		* Commands value of the brush mark.		*/			public function set commands(value:Vector.<int>):void {			_commnads = value.concat(new Vector.<int>());		}				public function get commands():Vector.<int> {			return _commnads;		}				/**		* Drawing Data of the brush mark.		*/			public function set drawingData(value:Vector.<Number>):void {			_drawingData = value.concat(new Vector.<Number>());		}				public function get drawingData():Vector.<Number> {			return _drawingData;		}				/**		* Position of the brush mark.		*/			public function set position(value:Point):void {			_position = value.clone();		}				public function get position():Point {			return _position;		}		/**		* The <code>clone</code> method will return a new instance of the BrushDefinition.		*		* @return Returns new BrushDefinition with all the same settings.		*/		public function clone():BrushDefinition {						return new BrushDefinition(_type, _color, _alpha, _size, _blur, _commnads, _drawingData, _position);					}			}	}