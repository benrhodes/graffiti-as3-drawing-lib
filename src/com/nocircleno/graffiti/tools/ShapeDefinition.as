/**  	Graffiti 3.0*  	______________________________________________________________________*  	www.nocircleno.com/graffiti/*//** 	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* 	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* 	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* 	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* 	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* 	OTHER DEALINGS IN THE SOFTWARE.*/package com.nocircleno.graffiti.tools {		import flash.geom.Point;		/**	* ShapeDefinition Class is used to represent a single shape graphic.	*	* @langversion 3.0    * @playerversion Flash 10 AIR 1.5 	*/	public class ShapeDefinition extends Object	{			private var _type:String;		private var _strokeColor:int;		private var _fillColor:int;		private var _strokeAlpha:Number;		private var _fillAlpha:Number;		private var _strokeSize:Number;		private var _position:Point;		private var _shapeWidth:Number;		private var _shapeHeight:Number;		private var _commnads:Vector.<int>;		private var _drawingData:Vector.<Number>;				/**		* The <code>ShapeDefinition</code> constructor.		*		* @param type Type of shape.		* @param strokeColor Color of the shape stroke. Set to -1 for no stroke.		* @param fillColor Color of the shape fill. Set to -1 for no fill.		* @param strokeAlpha Alpha value of the shape stroke.		* @param fillAlpha Alpha value of the shape fill.		* @param strokeSize Size of the stroke.		* @param commands Commands used to draw the brush mark.		* @param drawingData Drawing data.		* @param position Position of the brush mark.		* 		*/		public function ShapeDefinition(type:String, strokeColor:int, fillColor:int, strokeAlpha:Number, fillAlpha:Number, strokeSize:Number, shapeWidth:Number, shapeHeight:Number, commands:Vector.<int>, drawingData:Vector.<Number>,  position:Point) 		{						// store properties			_type = type;			_strokeColor = strokeColor;			_fillColor = fillColor;			_strokeAlpha = strokeAlpha;			_fillAlpha = fillAlpha;			_strokeSize = strokeSize;			_shapeWidth = shapeWidth;			_shapeHeight = shapeHeight;			_commnads = commands.concat(new Vector.<int>());			_drawingData = drawingData.concat(new Vector.<Number>());			_position = position.clone();					}				/**		* Type of the brush.		*/			public function set type(value:String):void {			_type = value;		}				public function get type():String {			return _type;		}				/**		* Commands value of the brush mark.		*/			public function set commands(value:Vector.<int>):void {			_commnads = value.concat(new Vector.<int>());		}				public function get commands():Vector.<int> {			return _commnads;		}				/**		* Drawing Data of the shape.		*/			public function set drawingData(value:Vector.<Number>):void {			_drawingData = value.concat(new Vector.<Number>());		}				public function get drawingData():Vector.<Number> {			return _drawingData;		}				/**		* Width of the Shape		*/			public function set width(value:Number):void {			_shapeWidth = value;		}				public function get width():Number {			return _shapeWidth;		}				/**		* Height of the Shape		*/			public function set height(value:Number):void {			_shapeHeight = value;		}				public function get height():Number {			return _shapeHeight;		}				/**		* Position of the shape.		*/			public function set position(value:Point):void {			_position = value.clone();		}				public function get position():Point {			return _position;		}				/**		* Stroke Color of the Shape, set to -1 for no stroke.		*/			public function get strokeColor():int { return _strokeColor; }				public function set strokeColor(value:int):void 		{			_strokeColor = value;		}				/**		* Fill Color of the Shape, set to -1 for no fill.		*/			public function get fillColor():int { return _fillColor; }				public function set fillColor(value:int):void 		{			_fillColor = value;		}				/**		* Alpha value for Shape Stroke.		*/			public function get strokeAlpha():Number { return _strokeAlpha; }				public function set strokeAlpha(value:Number):void 		{			_strokeAlpha = value;		}				/**		* Alpha value for Shape Fill.		*/		public function get fillAlpha():Number { return _fillAlpha; }				public function set fillAlpha(value:Number):void 		{			_fillAlpha = value;		}				/**		* Size of the Shape stroke.		*/		public function get strokeSize():Number { return _strokeSize; }				public function set strokeSize(value:Number):void 		{			_strokeSize = value;		}				/**		* The <code>clone</code> method will return a new instance of the ShapeDefinition.		*		* @return Returns new ShapeDefinition with all the same settings.		*/		public function clone():ShapeDefinition {						return new ShapeDefinition(_type, _strokeColor, _fillColor, _strokeAlpha, _fillAlpha, _strokeSize, _shapeWidth, _shapeHeight, _commnads, _drawingData, _position);					}			}	}